{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nLeft_Back = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nLeft_Middle = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nLeft_Front = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nRight_Back = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)\nRight_Middle = Motor(Ports.PORT17, GearSetting.RATIO_18_1, False)\nRight_Front = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)\nIntake = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\ncontroller_1 = Controller(PRIMARY)\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\ndigital_out_b = DigitalOut(brain.three_wire_port.b)\ninertial_15 = Inertial(Ports.PORT15)\n# vex-vision-config:begin\nvision_6__BLUERING = Signature(1, -4395, -3623, -4009,6963, 7791, 7377,1.6, 0)\nvision_6__REDRING = Signature(2, 9021, 10837, 9929,-1605, -861, -1233,5, 0)\nvision_6 = Vision(Ports.PORT6, 50, vision_6__BLUERING, vision_6__REDRING)\n# vex-vision-config:end\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      3400Z V5 Robot\n#\tAuthor:       Arav Jain, Arsh Jaiswal, Sripath Badhika, & Alex Reyes\n#\tCreated:      10/15/2024\n#\tDescription:  The top team's robot code!\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n\n# Brain should be defined by default\nbrain=Brain()\n\n\n# Robot configuration code\nLeft_Back = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\nLeft_Middle = Motor(Ports.PORT9, GearSetting.RATIO_18_1, True)\nLeft_Front = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\nRight_Back = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)\nRight_Middle = Motor(Ports.PORT17, GearSetting.RATIO_18_1, False)\nRight_Front = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)\nIntake = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nLeft_Lady = Motor(Ports.PORT7, GearSetting.RATIO_18_1, True)\nRight_Lady = Motor(Ports.PORT16, GearSetting.RATIO_18_1, False)\n\ncontroller_1 = Controller(PRIMARY)\ninertial_11 = Inertial(Ports.PORT11)\n\n\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n'''\n# Make random actually random\ndef initializeRandomSeed():\n   wait(100, MSEC)\n   random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n   urandom.seed(int(random))\n    \n# Set random seed\ninitializeRandomSeed()\n\n\n\n\ndef play_vexcode_sound(sound_name):\n   # Helper to make playing sounds from the V5 in VEXcode easier and\n   # keeps the code cleaner by making it clear what is happening.\n   print(\"VEXPlaySound:\" + sound_name)\n   wait(5, MSEC)\n\n'''\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n#endregion VEXcode Generated Robot Configuration\n\n\n# ------------------------------------------\n#\n#   Project:      3400Z V5 Robot\n#   Author:       Arav Jain & Sripath Badhika\n#   Created:      10/15/2024\n#   Description:  The code for the top team's robot!\n#\n# ------------------------------------------\n\n\n# Library imports\nfrom vex import *\n\n\n# Begin project code\n\n\n# Define motor groups using built-in MotorGroup class\nAllDriveMotors = MotorGroup(Left_Front, Left_Middle, Left_Back, Right_Front, Right_Middle, Right_Back)\nFrontMotors = MotorGroup(Left_Front, Right_Front)\nBackMotors = MotorGroup(Left_Back, Right_Back)\nRightMotors = MotorGroup(Right_Front, Right_Middle, Right_Back)\nLeftMotors = MotorGroup(Left_Front, Left_Middle, Left_Back)\nLady_brown = MotorGroup(Left_Lady, Right_Lady)\nx = False\n\n'''\n\ndef pre_autonomous():\n   \"\"\"Pre-autonomous code to run before the autonomous period.\"\"\"\n   brain.screen.clear_screen()\n   brain.screen.print(\"Pre-autonomous code executing...\")\n   wait(1, SECONDS)\n\n'''\n\n# Import the necessary libraries\nfrom vex import *\n\n# Initialize the inertial sensor on Port 15\ninertial_15 = Inertial(Ports.PORT15)\n\n'''\ndef check():\n    # Calibrate the inertial sensor\n    inertial_15.calibrate()\n    \n    # Wait until calibration completes\n    while inertial_15.is_calibrating():\n        wait(100, MSEC)  # Wait for 100 milliseconds before checking again\n\n    # Display a message indicating calibration is complete\n    brain.screen.clear_screen()\n    brain.screen.print(\"Calibrated! Now rotating...\")\n\n    while True:\n        # Get the current heading from the inertial sensor\n        actual_heading = inertial_15.heading()\n\n        # Update the screen with the current heading\n        brain.screen.clear_screen()  # Clear the screen to avoid clutter\n        brain.screen.set_cursor(1, 1)  # Set cursor to the top-left\n        brain.screen.print(\"Heading: {:.2f}\".format(actual_heading))  # Display the heading\n\n        # Short delay before updating the screen again\n        wait(100, MSEC)  # Adjust delay for smooth updates\n'''\ninertial_15 = Inertial(Ports.PORT15)\n\ndef inertial_turn(target_heading):\n    actual_heading = inertial_15.heading()\n    error = target_heading - actual_heading\n    Kp = 0.51\n    Ki = 0.00039\n    Kd = 0.3\n    tolerance = 2\n    settling_tolerance = 5  # Larger tolerance to determine \"close enough\"\n    settling_time = 500  # Time in milliseconds\n    integral = 0\n    previous_error = error\n    start_time = brain.timer.time()  # Start a timer\n\n    inertial_15.calibrate()\n    while inertial_15.is_calibrating():\n        wait(300, MSEC)\n\n    while abs(error) > tolerance:\n        actual_heading = inertial_15.heading(DEGREES)\n\n        # Normalize error to -180° to 180°\n        error = target_heading - actual_heading\n        if error > 180:\n            error -= 360\n        elif error < -180:\n            error += 360\n\n        # PID calculations\n        integral += error\n        integral = max(min(integral, 100), -100)  # Prevent integral windup\n\n        derivative = error - previous_error\n        motor_speed = Kp * error + Ki * integral + Kd * derivative\n\n        # Set motor speeds\n        RightMotors.spin(FORWARD, -motor_speed, PERCENT)\n        LeftMotors.spin(FORWARD, motor_speed, PERCENT)\n\n        # Display error on the Brain's screen\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 1)\n        brain.screen.print(\"Error: %.2f\" % error)\n        brain.screen.set_cursor(2, 1)\n        brain.screen.print(\"Heading: %.2f\" % actual_heading)\n        brain.screen.set_cursor(3, 1)\n        brain.screen.print(\"Motor Speed: %.2f\" % motor_speed)\n\n        # Check settling condition\n        if abs(error) <= settling_tolerance:\n            if brain.timer.time() - start_time >= settling_time:\n                break\n        else:\n            start_time = brain.timer.time()  # Reset timer if error exceeds tolerance\n\n        wait(400, MSEC)\n        previous_error = error\n\n    # Stop the motors once the turn is complete\n    RightMotors.stop()\n    LeftMotors.stop()\n    \n\n\n\n\n    \n\n\ncheck_blue = Event()\ncheck_red = Event()\nrun_task = True\nring_color = None\n\ndef has_blue():\n    global ring_color\n    brain.screen.clear_row(1)\n    brain.screen.set_cursor(1,1)\n    vex_vision = vision_6.take_snapshot(vision_6__BLUERING)\n    if vex_vision and len(vex_vision) > 0:\n        brain.screen.print(\"Blue Object\")\n        ring_color = \"Blue\"\n        wait(400,MSEC)\n    else:\n        brain.screen.print(\"No Object found\")\n        ring_color = None\n\n\n\ndef has_red():\n    global ring_color\n    brain.screen.clear_row(1)\n    brain.screen.set_cursor(1,1)\n    vex_vision = vision_6.take_snapshot(vision_6__REDRING)\n    if vex_vision and len(vex_vision) > 0:\n        brain.screen.print(\"Red Object\")\n        ring_color = \"Red\"\n        wait(400, MSEC)\n    else:\n        brain.screen.print(\"No Object found\")\n        ring_color = None\n\ndef calling_1():\n    global run_task\n    while run_task:\n        has_blue()  \n        if ring_color != \"Blue\":  \n            has_red()\n        wait(100, MSEC) \n\n\n    \n\n\n\n\n\n\ndigital_out_a = DigitalOut(brain.three_wire_port.a)  # Replace 'a' with your actual port\ndigital_out_b = DigitalOut(brain.three_wire_port.b)  # Replace 'b' with your actual port\n\n\nx = False  # State of the piston\nr1_pressed = False  # Tracks if the R2 button is pressed\n\n\n\n\n# Initialize the global variable for piston state\nx = False  # False = Retracted, True = Extended\n\n\ndef toggle_piston():\n   digital_out_a.set(False)\n\n\ndef toggle_piston_1():\n   digital_out_a.set(True)\n\n\ndef toggle_piston_2():\n   digital_out_b.set(True)\n\n\ndef toggle_piston_3():\n   digital_out_b.set(False)\n\n\n\ncontroller_1.buttonR2.pressed(toggle_piston)\ncontroller_1.buttonR1.pressed(toggle_piston_1)\n\n\ncontroller_1.buttonX.pressed(toggle_piston_2)\ncontroller_1.buttonA.pressed(toggle_piston_3)\n\n\n\n\n\n\ndef user_control():\n   #solenoid_state = False  # Initial state of the solenoid\n   global calling\n   calling = True\n   task_1 = Thread(calling_1)\n   global ring_color\n\n   while True:\n       Lady_brown.set_velocity(20, PERCENT)\n       if controller_1.buttonB.pressing():\n           Lady_brown.spin(FORWARD)\n       elif controller_1.buttonY.pressing():\n           Lady_brown.spin(REVERSE)\n       else:\n           Lady_brown.stop()\n\n       # Get the joystick values from the left joystick\n       raw_forward = controller_1.axis3.position()  # Forward/backward movement (left joystick up/down)\n       raw_turn = controller_1.axis4.position()     # Turning left/right (left joystick left/right)\n\n       # Define pneumatic solenoid\n       # Apply quadratic scaling for smoother control\n       # Normalize joystick values to range [-1, 1]\n       forward = raw_forward / 100.0\n       turn = raw_turn / 100.0\n\n       # Quadratic scaling to adjust sensitivity\n       forward = forward * abs(forward)  # Quadratic scaling for forward\n       turn = turn * abs(turn)           # Quadratic scaling for turn\n\n       # Scale back to motor speed range [-100, 100]\n       left_speed = (forward + turn) * 100\n       right_speed = (forward - turn) * 100\n\n       # Set the speed for each motor group\n       LeftMotors.set_velocity(left_speed, PERCENT)\n       RightMotors.set_velocity(right_speed, PERCENT)\n       Intake.set_velocity(150, PERCENT)\n       # Spin the motors accordingly\n     \n       LeftMotors.spin(FORWARD)\n       RightMotors.spin(FORWARD)\n\n       if controller_1.buttonX.pressing():\n           calling = False\n           \n       if ring_color == \"Blue\":\n           Intake.set_velocity(55,PERCENT)\n       else:\n           Intake.set_velocity(200, PERCENT)  # Default velocity\n\n       # Control intake motor\n       if controller_1.buttonL1.pressing():\n           Intake.spin(FORWARD)\n\n       elif controller_1.buttonL2.pressing():\n           Intake.spin(REVERSE)\n       else:\n           Intake.stop()\n\n       # Add a short delay to prevent wasted resources\n       wait(20, MSEC)\n\n       #if ring_color == \"Blue\":\n           #Intake.set_velocity(100, PERCENT)\n       #else:\n           #Intake.set_velocity(65, PERCENT)\n\n       # Bind the ButtonR1 press event to the toggle_piston function\n\n       # Handle arm control\n       # if buttonR1 and not r1_pressed:\n       #     toggle_piston()\n       #     r1_pressed = True\n       #     wait(200,MSEC)\n       # elif not buttonR1:\n       #     r1_pressed = False\n       #     wait(200,MSEC)\n\n       # while True:\n       #     Check if ButtonR1 is pressed\n       #     if controller_1.buttonR1.pressing():\n       #         digital_out_a.set(False)\n       #     else:\n       #         digital_out_a.set(True)\n       #     Check if ButtonA is tapped (pressed and then released)\n       #     if controller_1.buttonA.pressing():\n       #         while controller_1.buttonA.pressing():\n       #             break  # Exit the loop after the button is released\n       #     Ensure pneumatics return to True state after exiting the loop\n\n       # digital_out_a.set(True)\n\n       # Add a short delay to prevent wasted resource\n\n# Create competition instance\n#comp = Competition(user_control, autonomous)\n\n# Run pre-autonomous function\n#pre_autonomous()\n\ndef turnright(deg):\n    AllDriveMotors.set_velocity(35, PERCENT)\n    LeftMotors.spin_for(REVERSE, 1.29*(19/9)*deg, DEGREES, wait=False)\n    RightMotors.spin_for(FORWARD, 1.29*(19/9)*deg, DEGREES, wait=False)\n\ndef turnleft(deg):\n    AllDriveMotors.set_velocity(35, PERCENT)\n    LeftMotors.spin_for(FORWARD, 1.29*(19/9)*deg, DEGREES, wait=False)\n    RightMotors.spin_for(REVERSE, 1.29*(19/9)*deg, DEGREES, wait=False)\n\n\ndef autonomous():\n    \"\"\"Autonomous routine for the robot.\"\"\"\n\n    # 2 rings scoring block\n    Lady_brown.spin_for(REVERSE, 200, DEGREES)\n    Lady_brown.stop()\n    digital_out_a.set(True)\n    AllDriveMotors.set_velocity(30, PERCENT)\n    AllDriveMotors.spin_for(REVERSE, 600, DEGREES, wait=True)\n    digital_out_a.set(False)\n    inertial_turn(84)\n    Intake.set_velocity(100, PERCENT)\n    Intake.spin(REVERSE)\n    AllDriveMotors.set_velocity(100, PERCENT)\n    AllDriveMotors.spin_for(FORWARD, 370, DEGREES, wait=True)\n    AllDriveMotors.spin_for(REVERSE, 200, DEGREES, wait=True)\n    AllDriveMotors.spin_for(FORWARD, 200, DEGREES, wait=False)\n    wait(2, SECONDS)\n    Intake.stop()\n\n    '''\n    # 3rd ring scoring block\n    AllDriveMotors.set_velocity(20, PERCENT)\n    AllDriveMotors.spin_for(REVERSE, 300, DEGREES)\n    RightMotors.spin_for(REVERSE, 300, DEGREES)\n    turnleft(45)\n    LeftMotors.spin_for(FORWARD, 300, DEGREES)\n    Intake.set_velocity(100, PERCENT)\n    Intake.spin(REVERSE)\n    AllDriveMotors.set_velocity(100, PERCENT)\n    AllDriveMotors.spin_for(FORWARD,530,DEGREES)\n    AllDriveMotors.spin_for(REVERSE,200,DEGREES)\n    wait(4,SECONDS)\n    Intake.stop()\n    '''\n\n    '''\n    # 13 points scoring in Autonomous Skills\n    Lady_brown.spin_for(REVERSE, 200, DEGREES)\n    Lady_brown.stop()\n    digital_out_a.set(True)\n    AllDriveMotors.set_velocity(10, PERCENT)\n    AllDriveMotors.spin_for(REVERSE, 100, DEGREES, wait=True)\n    digital_out_a.set(False)\n    wait(2, SECONDS)\n    AllDriveMotors.set_velocity(30, PERCENT)\n    Intake.set_velocity(100, PERCENT)\n    Intake.spin(REVERSE)\n    turnright(185)\n    wait(2, SECONDS)\n    AllDriveMotors.spin_for(FORWARD, 430, DEGREES, wait=True)\n    turnleft(65)\n    wait(2, SECONDS)\n    AllDriveMotors.spin_for(FORWARD, 430, DEGREES, wait=True)\n    turnleft(100)\n    wait(2, SECONDS)\n    AllDriveMotors.set_velocity(10, PERCENT)\n    AllDriveMotors.spin_for(FORWARD, 600, DEGREES)\n    AllDriveMotors.set_velocity(20, PERCENT)\n    AllDriveMotors.spin_for(REVERSE, 200, DEGREES)\n    turnright(75)\n    wait(2, SECONDS)\n    AllDriveMotors.spin_for(FORWARD, 200, DEGREES)\n    turnright(120)\n    wait(2, SECONDS)\n    AllDriveMotors.spin_for(REVERSE, 300, DEGREES, wait=True)\n    digital_out_a.set(True)\n    Intake.spin(FORWARD)\n    AllDriveMotors.spin_for(FORWARD, 270, DEGREES)\n    wait(2, SECONDS)\n    '''\n\n#autonomous()\n# Create competition instance\ncomp = Competition(user_control, autonomous)\n\n\n# Will check to see if there is a blue object in view of the vision\n# sensor and display the result on line 1 on the V5 Brain's screen\n","textLanguage":"python","robotConfig":[{"port":[10],"name":"Left_Back","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"Left_Middle","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"Left_Front","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[18],"name":"Right_Back","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[17],"name":"Right_Middle","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[19],"name":"Right_Front","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"digital_out_a","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"digital_out_b","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[15],"name":"inertial_15","customName":false,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[6],"name":"vision_6","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"BLUERING\",\"parameters\":{\"uMin\":-4395,\"uMax\":-3623,\"uMean\":-4009,\"vMin\":6963,\"vMax\":7791,\"vMean\":7377,\"rgb\":4222658,\"type\":0,\"name\":\"BLUERING\"},\"range\":1.6},{\"name\":\"REDRING\",\"parameters\":{\"uMin\":9021,\"uMax\":10837,\"uMean\":9929,\"vMin\":-1605,\"vMax\":-861,\"vMean\":-1233,\"rgb\":13065038,\"type\":0,\"name\":\"REDRING\"},\"range\":5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}