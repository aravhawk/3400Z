{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nLeft_Front = Motor(Ports.PORT17, GearSetting.RATIO_18_1, True)\nLeft_Back = Motor(Ports.PORT7, GearSetting.RATIO_18_1, True)\ncontroller_1 = Controller(PRIMARY)\nRight_Front = Motor(Ports.PORT6, GearSetting.RATIO_18_1, False)\nRight_Back = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nIntake_motor_a = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)\nIntake_motor_b = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)\nIntake = MotorGroup(Intake_motor_a, Intake_motor_b)\n# vex-vision-config:begin\nvision_5 = Vision(Ports.PORT5, 50)\n# vex-vision-config:end\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\ndigital_out_b = DigitalOut(brain.three_wire_port.b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      3400Z V5 Robot\n#\tAuthor:       Arav Jain & Sripath Badhika\n#\tCreated:      10/15/2024\n#\tDescription:  The code for the top team's robot!\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n# Define motor groups using built-in MotorGroup class\nAllDriveMotors = MotorGroup(Left_Front, Left_Back, Right_Front, Right_Back)\nFrontMotors = MotorGroup(Left_Front, Right_Front)\nBackMotors = MotorGroup(Left_Back, Right_Back)\nRightMotors = MotorGroup(Right_Front, Right_Back)\nLeftMotors = MotorGroup(Left_Front, Left_Back)\n\ndef captureGoal(speed: int):\n    \"\"\"Capture the goal by moving the robot backward and activating solenoids.\"\"\"\n    AllDriveMotors.set_velocity(speed, PERCENT)\n    # Deactivate solenoids\n    digital_out_a.set(False)\n    digital_out_b.set(False)\n    # Move robot backward\n    AllDriveMotors.spin(REVERSE)\n    # Activate solenoids to capture goal\n    digital_out_a.set(True)\n    digital_out_b.set(True)\n\ndef releaseGoal(speed: int):\n    \"\"\"Release the goal by moving the robot forward and deactivating solenoids.\"\"\"\n    AllDriveMotors.set_velocity(speed, PERCENT)\n    # Deactivate solenoids\n    digital_out_a.set(False)\n    digital_out_b.set(False)\n    # Move robot forward\n    AllDriveMotors.spin(FORWARD)\n    # Optionally, activate solenoids after releasing\n    # digital_out_a.set(True)\n    # digital_out_b.set(True)\n\ndef pre_autonomous():\n    \"\"\"Pre-autonomous code to run before the autonomous period.\"\"\"\n    brain.screen.clear_screen()\n    brain.screen.print(\"Pre-autonomous code executing...\")\n    wait(1, SECONDS)\n\ndef autonomous():\n    \"\"\"Autonomous routine for the robot.\"\"\"\n    brain.screen.clear_screen()\n    brain.screen.print(\"3400Z Autonomous Code\")\n    \n    # Set drive velocity\n    AllDriveMotors.set_velocity(50, PERCENT)\n    # Spin left motors forward and right motors reverse to turn in place\n    LeftMotors.spin(FORWARD)\n    RightMotors.spin(REVERSE)\n    # Add more autonomous actions as needed\n    # ...\n\ndef user_control():\n    \"\"\"User control code for teleoperated period.\"\"\"\n    brain.screen.clear_screen()\n    # Place driver control in this while loop\n    while True:\n        # Get the joystick values from the left joystick\n        raw_forward = controller_1.axis3.position()  # Forward/backward movement (left joystick up/down)\n        raw_turn = controller_1.axis4.position()     # Turning left/right (left joystick left/right)\n\n        # Apply quadratic scaling for smoother control\n        # Normalize joystick values to range [-1, 1]\n        forward = raw_forward / 100.0\n        turn = raw_turn / 100.0\n\n        # Quadratic scaling to adjust sensitivity\n        forward = forward * abs(forward)  # Quadratic scaling for forward\n        turn = turn * abs(turn)           # Quadratic scaling for turn\n\n        # Scale back to motor speed range [-100, 100]\n        left_speed = (forward + turn) * 100\n        right_speed = (forward - turn) * 100\n\n        # Set the speed for each motor group\n        LeftMotors.set_velocity(left_speed, PERCENT)\n        RightMotors.set_velocity(right_speed, PERCENT)\n\n        # Spin the motors accordingly\n        LeftMotors.spin(FORWARD)\n        RightMotors.spin(FORWARD)\n\n        # Control intake motor\n        if controller_1.buttonL1.pressing():\n            Intake.set_velocity(100, PERCENT)\n            Intake.spin(FORWARD)\n        elif controller_1.buttonL2.pressing():\n            Intake.set_velocity(100, PERCENT)\n            Intake.spin(REVERSE)\n        else:\n            Intake.stop()\n\n        # Add a short delay to prevent wasted resources\n        wait(20, MSEC)\n\n# Create competition instance\ncomp = Competition(user_control, autonomous)\n\n# Run pre-autonomous function\npre_autonomous()\n\ncheck_red = Event()\ncheck_blue = Event()\n\n# Will check to see if there is a blue object in view of the vision\n# sensor and display the result on line 1 on the V5 Brain's screen\ndef has_blue_callback():\n    brain.screen.clear_row(1)\n    brain.screen.set_cursor(1, 1)\n    vexcode_vision_5_objects = vision_5.take_snapshot(vision_5__BLUEBOX)\n    if vexcode_vision_5_objects and len(vexcode_vision_5_objects) > 0:\n        brain.screen.print(\"Blue Object Found\")\n    else:\n        brain.screen.print(\"No Blue Object\")\n\n# Will check to see if there is a red object in view of the vision\n# sensor and display the result on line 3 on the V5 Brain's screen\ndef has_red_callback():\n    brain.screen.clear_row(3)\n    brain.screen.set_cursor(3, 1)\n    vexcode_vision_5_objects = vision_5.take_snapshot(vision_5__REDBOX)\n    if vexcode_vision_5_objects and len(vexcode_vision_5_objects) > 0:\n        brain.screen.print(\"Red Object Found\")\n    else:\n        brain.screen.print(\"No Red Object\")\n\n# register event handlers\ncheck_blue(has_blue_callback)\ncheck_red(has_red_callback)\n\n# small delay to ensure that the event handlers are ready to be used\nwait(15, MSEC)\n\n# set the print font for all future prints to the V5 screen\nbrain.screen.set_font(FontType.MONO40)\n\n# constantly runs to check for new sensor data\nwhile True:\n    check_blue.broadcast_and_wait()\n    check_red.broadcast_and_wait()\n    wait(0.1, SECONDS)\n","textLanguage":"python","robotConfig":[{"port":[17],"name":"Left_Front","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[7],"name":"Left_Back","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[6],"name":"Right_Front","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[10],"name":"Right_Back","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[19,18],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[5],"name":"vision_5","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"SIG_1\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_1\"},\"range\":2.5},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false","id":"partner"},"triportSourcePort":22},{"port":[1],"name":"digital_out_a","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"digital_out_b","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}