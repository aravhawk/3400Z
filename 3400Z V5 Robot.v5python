{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nLeft_Front = Motor(Ports.PORT18, GearSetting.RATIO_18_1, True)\nLeft_Back = Motor(Ports.PORT21, GearSetting.RATIO_18_1, True)\ncontroller_1 = Controller(PRIMARY)\nRight_Front = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nRight_Back = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nIntake_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nIntake_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nIntake = MotorGroup(Intake_motor_a, Intake_motor_b)\n# vex-vision-config:begin\nvision_20 = Vision(Ports.PORT20, 50)\n# vex-vision-config:end\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\ndigital_out_b = DigitalOut(brain.three_wire_port.b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_up_down_buttons_control_motors_stopped = True\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global controller_1_up_down_buttons_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # check the buttonUp/buttonDown status\n            # to control Left_Front\n            if controller_1.buttonUp.pressing():\n                Left_Front.spin(FORWARD)\n                controller_1_up_down_buttons_control_motors_stopped = False\n            elif controller_1.buttonDown.pressing():\n                Left_Front.spin(REVERSE)\n                controller_1_up_down_buttons_control_motors_stopped = False\n            elif not controller_1_up_down_buttons_control_motors_stopped:\n                Left_Front.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_up_down_buttons_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      3400Z V5 Robot\n#\tAuthors:      Arav Jain, Arsh Jaiswal, Sripath Badhika, & Alex Reyes\n#\tCreated:      10/15/2024\n#\tDescription:  The code for the top team's robot!\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n# Define motor groups using built-in MotorGroup class\nAllDriveMotors = MotorGroup(Left_Front, Left_Back, Right_Front, Right_Back)\nFrontMotors = MotorGroup(Left_Front, Right_Front)\nBackMotors = MotorGroup(Left_Back, Right_Back)\nRightMotors = MotorGroup(Right_Front, Right_Back)\nLeftMotors = MotorGroup(Left_Front, Left_Back)\nx = False\n\ndef turnleft(deg):\n    AllDriveMotors.set_velocity(35, PERCENT)\n    LeftMotors.spin_for(REVERSE, (19/9)*deg, DEGREES, wait=False)\n    RightMotors.spin_for(FORWARD, (19/9)*deg, DEGREES, wait=False)\n\ndef turnright(deg):\n    AllDriveMotors.set_velocity(35, PERCENT)\n    LeftMotors.spin_for(FORWARD, (19/9)*deg, DEGREES, wait=False)\n    RightMotors.spin_for(REVERSE, (19/9)*deg, DEGREES, wait=False)\n\n# Autonomous Phase\ndef autonomous():\n    # Score starter ring in alliance stake\n    AllDriveMotors.set_velocity(35, PERCENT)\n    AllDriveMotors.spin_for(REVERSE, 500, DEGREES)\n    AllDriveMotors.spin_for(FORWARD, 240, DEGREES)\n    turnleft(90)\n    wait(2, SECONDS)\n    AllDriveMotors.spin_for(REVERSE, 250, DEGREES, wait=False)\n    wait(1, SECONDS)\n    Intake.set_velocity(200, PERCENT)\n    Intake.spin(FORWARD)\n    wait(2, SECONDS)\n\n    # Capture a mobile goal\n    AllDriveMotors.spin_for(FORWARD, 300, DEGREES)\n    turnright(90)\n    wait(1500, MSEC)\n    AllDriveMotors.spin_for(FORWARD, 300, DEGREES)\n    turnright(90)\n    wait(1500, MSEC)\n    AllDriveMotors.spin_for(REVERSE, 300, DEGREES)\n    digital_out_a.set(False)\n\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\n\n# Track pneumatic state and button press\nbrain.screen.clear_screen()\nbrain.screen.set_cursor(1, 1)\nbrain.screen.print(\"Piston Retracted\")  # Starts retracted\n\nx = False # Piston state\nr1_pressed = False\n\n# Global variable of piston state\nx = False  # False = Retracted, True = Extended\n\ndef toggle_piston():\n    digital_out_a.set(False)\n\ndef toggle_piston_1():\n    digital_out_a.set(True)\n\ndef close():\n    global myVariable\n    wait(1, SECONDS)\n    digital_out_a.set(False)\n    wait(1, SECONDS)\n\ndef open_1():\n    wait(1, SECONDS)\n    digital_out_a.set(True)\n    wait(1, SECONDS)\n\ncontroller_1.buttonR2.pressed(toggle_piston)\ncontroller_1.buttonR1.pressed(toggle_piston_1)\n\ndef user_control():\n\n    #solenoid_state = False  # solenoid initial state\n    global r1_pressed\n\n    while True:\n        # Values from left joystick\n        raw_forward = controller_1.axis3.position()  # Forward/backward movement (left joystick up/down)\n        raw_turn = controller_1.axis4.position()     # Turning left/right (left joystick left/right)\n\n        # Define pneumatic solenoid\n        # Apply quadratic scaling for smoother control\n        # Normalize joystick values to range [-1, 1]\n        forward = raw_forward / 100.0\n        turn = raw_turn / 100.0\n\n        # Quadratic scaling to adjust sensitivity\n        forward = forward * abs(forward)  # Quadratic scaling for forward\n        turn = turn * abs(turn)           # Quadratic scaling for turn\n\n        # Scale back to motor speed range [-100, 100]\n        left_speed = (forward + turn) * 100\n        right_speed = (forward - turn) * 100\n\n        # Set speed for each motor group\n        LeftMotors.set_velocity(left_speed, PERCENT)\n        RightMotors.set_velocity(right_speed, PERCENT)\n\n        # Spin motors accordingly\n       \n        LeftMotors.spin(FORWARD)\n        RightMotors.spin(FORWARD)\n\n        # Control intake motor\n        if controller_1.buttonL1.pressing():\n            Intake.set_velocity(150, PERCENT)\n            Intake.spin(FORWARD)\n        elif controller_1.buttonL2.pressing():\n            Intake.set_velocity(150, PERCENT)\n            Intake.spin(REVERSE)\n        else:\n            Intake.stop()\n\n        if controller_1.buttonUp.pressing():\n            LeftMotors.set_velocity(50, PERCENT)\n            RightMotors.set_velocity(50, PERCENT)\n            LeftMotors.spin(FORWARD)\n            RightMotors.spin(FORWARD)\n        elif controller_1.buttonDown.pressing():\n            LeftMotors.set_velocity(50, PERCENT)\n            RightMotors.set_velocity(50, PERCENT)\n            LeftMotors.spin(REVERSE)\n            RightMotors.spin(REVERSE)\n        elif controller_1.buttonRight.pressing():\n            LeftMotors.set_velocity(50, PERCENT)\n            RightMotors.set_velocity(50, PERCENT)\n            LeftMotors.spin(FORWARD)\n            RightMotors.spin(REVERSE)\n        elif controller_1.buttonLeft.pressing():\n            LeftMotors.set_velocity(50, PERCENT)\n            RightMotors.set_velocity(50, PERCENT)\n            LeftMotors.spin(REVERSE)\n            RightMotors.spin(FORWARD)\n        \n        # Short delay to prevent wastage\n        wait(20,MSEC)\n\n\n\n# Create competition instance\ncomp = Competition(user_control, autonomous)\n","textLanguage":"python","robotConfig":[{"port":[18],"name":"Left_Front","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[21],"name":"Left_Back","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"Left_Front","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[11],"name":"Right_Front","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[1],"name":"Right_Back","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[2,10],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[20],"name":"vision_20","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"SIG_1\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_1\"},\"range\":2.5},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false","id":"partner"},"triportSourcePort":22},{"port":[1],"name":"digital_out_a","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"digital_out_b","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}